[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Removes provided element from an array."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "4.0.8",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Array"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "arrayRemoveItem"
      },
      {
        "title": "param",
        "description": "array to remove element from",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "StringArray"
        },
        "name": "array"
      },
      {
        "title": "param",
        "description": "element to remove from the array",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "toRemove"
      },
      {
        "title": "returns",
        "description": "Returns an array without the removed element.",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "StringArray"
        }
      },
      {
        "title": "example",
        "description": "arrayRemoveItem(['The', 'quick', 'brown'], 'The');\n// => ['quick', 'brown']",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 14,
        "column": 3,
        "index": 402
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0,
          "index": 404
        },
        "end": {
          "line": 18,
          "column": 2,
          "index": 530
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/array-remove-item/array-remove-item.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "arrayRemoveItem(['The', 'quick', 'brown'], 'The');\n// => ['quick', 'brown']"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "array",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "array to remove element from"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "StringArray"
        }
      },
      {
        "title": "param",
        "name": "toRemove",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "element to remove from the array"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns an array without the removed element."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "StringArray"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "4.0.8",
    "kind": "module",
    "name": "arrayRemoveItem",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "arrayRemoveItem",
        "kind": "module"
      }
    ],
    "namespace": "arrayRemoveItem"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Convert an array to a string and combine on the delimiter passed."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "String"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "arrayToString"
      },
      {
        "title": "param",
        "description": "array to convert to string",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "AnyArray"
        },
        "name": "array"
      },
      {
        "title": "param",
        "description": "characater to use in  combining to string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "delimiter"
      },
      {
        "title": "returns",
        "description": "Returns a string from the array.",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "arrayToString(['The', 'quick', 'brown'], '-');\n// => 'The-brown-fox'",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 14,
        "column": 3,
        "index": 407
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0,
          "index": 409
        },
        "end": {
          "line": 17,
          "column": 24,
          "index": 513
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/array-to-string/array-to-string.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "arrayToString(['The', 'quick', 'brown'], '-');\n// => 'The-brown-fox'"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "array",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "array to convert to string"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "AnyArray"
        }
      },
      {
        "title": "param",
        "name": "delimiter",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "characater to use in  combining to string"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a string from the array."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "arrayToString",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "arrayToString",
        "kind": "module"
      }
    ],
    "namespace": "arrayToString"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Detects browser being used."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "3.1.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Browser"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "browserDetect"
      },
      {
        "title": "returns",
        "description": "Returns browser name",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "browserDetect();\n// => 'Chrome",
        "lineNumber": 7
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0,
        "index": 78
      },
      "end": {
        "line": 15,
        "column": 3,
        "index": 273
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 17,
          "column": 0,
          "index": 275
        },
        "end": {
          "line": 52,
          "column": 2,
          "index": 1004
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/browser-detect/browser-detect.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "browserDetect();\n// => 'Chrome"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns browser name"
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "3.1.0",
    "kind": "module",
    "name": "browserDetect",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "browserDetect",
        "kind": "module"
      }
    ],
    "namespace": "browserDetect"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Brightens or darkens a HEX color based on the amount specified. Behaves like the SASS lighen and darken.\nWill always return with # symbol."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.7.1",
        "lineNumber": 4
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 5,
        "type": null,
        "name": "Color"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 6,
        "name": "colorBrightness"
      },
      {
        "title": "param",
        "description": "HEX color to change brightness",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "hex"
      },
      {
        "title": "param",
        "description": "positive or negative percentage",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "amount"
      },
      {
        "title": "returns",
        "description": "Returns a manipulated HEX color",
        "lineNumber": 9,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "colorBrightness('#3CB878', 50);\n// => '#6EEAAA'\n\ncolorBrightness('#3CB878', -50);\n// => '#A8646'",
        "lineNumber": 10
      }
    ],
    "loc": {
      "start": {
        "line": 4,
        "column": 0,
        "index": 109
      },
      "end": {
        "line": 21,
        "column": 3,
        "index": 615
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 23,
          "column": 0,
          "index": 617
        },
        "end": {
          "line": 52,
          "column": 2,
          "index": 1271
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/color-brightness/color-brightness.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "colorBrightness('#3CB878', 50);\n// => '#6EEAAA'\n\ncolorBrightness('#3CB878', -50);\n// => '#A8646'"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "hex",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "HEX color to change brightness"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "param",
        "name": "amount",
        "lineNumber": 8,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "positive or negative percentage"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a manipulated HEX color"
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.7.1",
    "kind": "module",
    "name": "colorBrightness",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "colorBrightness",
        "kind": "module"
      }
    ],
    "namespace": "colorBrightness"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Generates a GUID."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Key"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "guid"
      },
      {
        "title": "returns",
        "description": "guid string",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "guid();\n// => \"0153a717-3ba2-b1ac-67f1-49db6551a28d\"",
        "lineNumber": 7
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 12,
        "column": 3,
        "index": 185
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 0,
          "index": 187
        },
        "end": {
          "line": 20,
          "column": 2,
          "index": 396
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/guid/guid.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "guid();\n// => \"0153a717-3ba2-b1ac-67f1-49db6551a28d\""
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "guid string"
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "guid",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "guid",
        "kind": "module"
      }
    ],
    "namespace": "guid"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Inverts a HEX color."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.6.1",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Color"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "invertColor"
      },
      {
        "title": "param",
        "description": "hex color to convert",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "hex"
      },
      {
        "title": "returns",
        "description": "Returns a HEX color string.",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "invertColor('#E3CCA8');\n// => '#1C3357'\n\ninvertColor('ccc');\n// => '#333333'",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 10,
        "column": 0,
        "index": 225
      },
      "end": {
        "line": 25,
        "column": 3,
        "index": 514
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 27,
          "column": 0,
          "index": 516
        },
        "end": {
          "line": 46,
          "column": 2,
          "index": 1226
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/invert-hex-color/invert-hex-color.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "invertColor('#E3CCA8');\n// => '#1C3357'\n\ninvertColor('ccc');\n// => '#333333'"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "hex",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "hex color to convert"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a HEX color string."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.6.1",
    "kind": "module",
    "name": "invertColor",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "invertColor",
        "kind": "module"
      }
    ],
    "namespace": "invertColor"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Get a random pastel color."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Color"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "randomPastelColor"
      },
      {
        "title": "returns",
        "description": "Returns an HSL color.",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "randomPastelColor();\n// => 'hsl(85.78009756824814,31.861668997564585%,90.94781190317771%)'",
        "lineNumber": 7
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 12,
        "column": 3,
        "index": 257
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 13,
          "column": 0,
          "index": 258
        },
        "end": {
          "line": 18,
          "column": 2,
          "index": 430
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/random-pastel-color/random-pastel-color.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "randomPastelColor();\n// => 'hsl(85.78009756824814,31.861668997564585%,90.94781190317771%)'"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns an HSL color."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "randomPastelColor",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "randomPastelColor",
        "kind": "module"
      }
    ],
    "namespace": "randomPastelColor"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Converts a number of bytes to a human readable file size."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "File"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "readableBytes"
      },
      {
        "title": "param",
        "description": "number of bytes to show",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "Number"
        },
        "name": "bytes"
      },
      {
        "title": "param",
        "description": "optional number of decimals to show",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Number"
          }
        },
        "name": "decimals"
      },
      {
        "title": "returns",
        "description": "Returns a human readable file size.",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "readableBytes(1234);\n// => 1.205078125 kB\n\nreadableBytes(1234, 2);\n// => 1.21 kB",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 50
      },
      "end": {
        "line": 19,
        "column": 3,
        "index": 460
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 20,
          "column": 0,
          "index": 461
        },
        "end": {
          "line": 30,
          "column": 2,
          "index": 882
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/readable-bytes/readable-bytes.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "readableBytes(1234);\n// => 1.205078125 kB\n\nreadableBytes(1234, 2);\n// => 1.21 kB"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "bytes",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "number of bytes to show"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "Number"
        }
      },
      {
        "title": "param",
        "name": "decimals",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "optional number of decimals to show"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "Number"
          }
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a human readable file size."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "readableBytes",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "readableBytes",
        "kind": "module"
      }
    ],
    "namespace": "readableBytes"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Converts a string into a slug for URL usage."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "2.1.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "String"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "slugify"
      },
      {
        "title": "param",
        "description": "string to convert to slug",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "string"
      },
      {
        "title": "returns",
        "description": "Returns slug version of the string.",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "slugify('The quick brown fox');\n// => 'the-quick-brown-fox'\n\nslugify('A. more-Complicated string!..');\n// => 'a-more-complicated-string'\n\nslugify('wïth speciäl chærs');\n// => 'with-special-chars'",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 19,
        "column": 3,
        "index": 453
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 21,
          "column": 0,
          "index": 455
        },
        "end": {
          "line": 39,
          "column": 2,
          "index": 1301
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/slugify/slugify.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "slugify('The quick brown fox');\n// => 'the-quick-brown-fox'\n\nslugify('A. more-Complicated string!..');\n// => 'a-more-complicated-string'\n\nslugify('wïth speciäl chærs');\n// => 'with-special-chars'"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "string",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "string to convert to slug"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns slug version of the string."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "2.1.0",
    "kind": "module",
    "name": "slugify",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "slugify",
        "kind": "module"
      }
    ],
    "namespace": "slugify"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Removes all data stored in the local storage."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.9.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Storage"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "storageClear"
      },
      {
        "title": "example",
        "description": "storageClear();",
        "lineNumber": 6
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 11,
        "column": 3,
        "index": 155
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0,
          "index": 156
        },
        "end": {
          "line": 12,
          "column": 62,
          "index": 218
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/storage-clear/storage-clear.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "storageClear();"
      }
    ],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.9.0",
    "kind": "module",
    "name": "storageClear",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "storageClear",
        "kind": "module"
      }
    ],
    "namespace": "storageClear"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Retrieves data from the local storage."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.9.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Storage"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "storageGet"
      },
      {
        "title": "param",
        "description": "key to retrieve",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      },
      {
        "title": "returns",
        "description": "Returns data from the local storage. Returns '' if key is not found",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "Any"
        }
      },
      {
        "title": "example",
        "description": "storageGet('key');",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 35
      },
      "end": {
        "line": 14,
        "column": 3,
        "index": 306
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0,
          "index": 308
        },
        "end": {
          "line": 25,
          "column": 2,
          "index": 586
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/storage-get/storage-get.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "storageGet('key');"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "key to retrieve"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns data from the local storage. Returns '' if key is not found"
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "Any"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.9.0",
    "kind": "module",
    "name": "storageGet",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "storageGet",
        "kind": "module"
      }
    ],
    "namespace": "storageGet"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Removes an entry from the local storage."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.9.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Storage"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "storageRemove"
      },
      {
        "title": "param",
        "description": "key of the entry to remove",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      },
      {
        "title": "example",
        "description": "storageRemove('key');",
        "lineNumber": 7
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 11,
        "column": 3,
        "index": 204
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 12,
          "column": 0,
          "index": 205
        },
        "end": {
          "line": 13,
          "column": 38,
          "index": 289
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/storage-remove/storage-remove.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "storageRemove('key');"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "key of the entry to remove"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.9.0",
    "kind": "module",
    "name": "storageRemove",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "storageRemove",
        "kind": "module"
      }
    ],
    "namespace": "storageRemove"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Stores data to the local storage."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.9.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Storage"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "storageSet"
      },
      {
        "title": "param",
        "description": "name of the entry",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "key"
      },
      {
        "title": "param",
        "description": "data to store in the local storage",
        "lineNumber": 7,
        "type": {
          "type": "AllLiteral"
        },
        "name": "data"
      },
      {
        "title": "example",
        "description": "storageSet('key', data);",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 35
      },
      "end": {
        "line": 14,
        "column": 3,
        "index": 277
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 15,
          "column": 0,
          "index": 278
        },
        "end": {
          "line": 16,
          "column": 76,
          "index": 412
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/storage-set/storage-set.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "storageSet('key', data);"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "key",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "name of the entry"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "param",
        "name": "data",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "data to store in the local storage"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "AllLiteral"
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.9.0",
    "kind": "module",
    "name": "storageSet",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "storageSet",
        "kind": "module"
      }
    ],
    "namespace": "storageSet"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Splits a string to an array based on the delimiter passed."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "Array"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "stringToArray"
      },
      {
        "title": "param",
        "description": "string to convert to array",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "string"
      },
      {
        "title": "param",
        "description": "where to split the string",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "delimiter"
      },
      {
        "title": "returns",
        "description": "Returns an array of the split string.",
        "lineNumber": 8,
        "type": {
          "type": "NameExpression",
          "name": "StringArray"
        }
      },
      {
        "title": "example",
        "description": "stringToArray('apple;banana;orange', ';');\n// => ['apple', 'banana', 'orange']",
        "lineNumber": 9
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 14,
        "column": 3,
        "index": 402
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 15,
          "column": 0,
          "index": 403
        },
        "end": {
          "line": 16,
          "column": 26,
          "index": 497
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/string-to-array/string-to-array.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "stringToArray('apple;banana;orange', ';');\n// => ['apple', 'banana', 'orange']"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "string",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "string to convert to array"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "param",
        "name": "delimiter",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "where to split the string"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns an array of the split string."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "StringArray"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "stringToArray",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "stringToArray",
        "kind": "module"
      }
    ],
    "namespace": "stringToArray"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Converts any value to a Boolean equivalent."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "strong",
              "children": [
                {
                  "type": "text",
                  "value": "Note:"
                }
              ]
            },
            {
              "type": "text",
              "value": " If no user-defined array is passed, the default true values are:"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "['true', 'yes', 'y', '1']."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "3.1.1",
        "lineNumber": 7
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 8,
        "type": null,
        "name": "Boolean"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 9,
        "name": "toBoolean"
      },
      {
        "title": "param",
        "description": "value to check if true or false",
        "lineNumber": 10,
        "type": {
          "type": "AllLiteral"
        },
        "name": "val"
      },
      {
        "title": "param",
        "description": "optional array of user defined true values",
        "lineNumber": 11,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "AnyArray"
          }
        },
        "name": "trueValuesArr"
      },
      {
        "title": "returns",
        "description": "Returns a boolean equivalent of the value.",
        "lineNumber": 12,
        "type": {
          "type": "NameExpression",
          "name": "Boolean"
        }
      },
      {
        "title": "example",
        "description": "toBoolean('y');\n // => true\n\ntoBoolean(null);\n// => false",
        "lineNumber": 13
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 66
      },
      "end": {
        "line": 23,
        "column": 3,
        "index": 575
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 24,
          "column": 0,
          "index": 576
        },
        "end": {
          "line": 39,
          "column": 2,
          "index": 911
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/to-boolean/to-boolean.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "toBoolean('y');\n // => true\n\ntoBoolean(null);\n// => false"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "val",
        "lineNumber": 10,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "value to check if true or false"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "AllLiteral"
        }
      },
      {
        "title": "param",
        "name": "trueValuesArr",
        "lineNumber": 11,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "optional array of user defined true values"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "AnyArray"
          }
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a boolean equivalent of the value."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "Boolean"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "3.1.1",
    "kind": "module",
    "name": "toBoolean",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "toBoolean",
        "kind": "module"
      }
    ],
    "namespace": "toBoolean"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Converts a string to Sentence case."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "String"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "toSentenceCase"
      },
      {
        "title": "param",
        "description": "string to convert to Sentence case",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "string"
      },
      {
        "title": "returns",
        "description": "Returns a Sentence case string.",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "toSentenceCase('THE QUICK BROWN FOX');\n// => 'The quick brown fox'",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 1,
        "column": 0,
        "index": 0
      },
      "end": {
        "line": 13,
        "column": 3,
        "index": 311
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 14,
          "column": 0,
          "index": 312
        },
        "end": {
          "line": 17,
          "column": 2,
          "index": 473
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/to-sentence-case/to-sentence-case.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "toSentenceCase('THE QUICK BROWN FOX');\n// => 'The quick brown fox'"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "string",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "string to convert to Sentence case"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a Sentence case string."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "toSentenceCase",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "toSentenceCase",
        "kind": "module"
      }
    ],
    "namespace": "toSentenceCase"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Converts a string to a Title Case."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "version",
        "description": "1.0.0",
        "lineNumber": 3
      },
      {
        "title": "module",
        "description": null,
        "lineNumber": 4,
        "type": null,
        "name": "String"
      },
      {
        "title": "name",
        "description": null,
        "lineNumber": 5,
        "name": "toTitleCase"
      },
      {
        "title": "param",
        "description": "string to convert to Title Case",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "String"
        },
        "name": "string"
      },
      {
        "title": "returns",
        "description": "Returns a Tile Case string.",
        "lineNumber": 7,
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      },
      {
        "title": "example",
        "description": "toTitleCase('the quick brown fox');\n// => 'The Quick Brown Fox'",
        "lineNumber": 8
      }
    ],
    "loc": {
      "start": {
        "line": 3,
        "column": 0,
        "index": 47
      },
      "end": {
        "line": 15,
        "column": 3,
        "index": 344
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 16,
          "column": 0,
          "index": 345
        },
        "end": {
          "line": 22,
          "column": 6,
          "index": 529
        }
      },
      "file": "/home/iamdevlinph/projects/iamdevlinph/common-utils-pkg/src/to-title-case/to-title-case.ts"
    },
    "augments": [],
    "examples": [
      {
        "description": "toTitleCase('the quick brown fox');\n// => 'The Quick Brown Fox'"
      }
    ],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "string",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "string to convert to Title Case"
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "properties": [],
    "returns": [
      {
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Returns a Tile Case string."
                }
              ]
            }
          ]
        },
        "title": "returns",
        "type": {
          "type": "NameExpression",
          "name": "String"
        }
      }
    ],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "version": "1.0.0",
    "kind": "module",
    "name": "toTitleCase",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "toTitleCase",
        "kind": "module"
      }
    ],
    "namespace": "toTitleCase"
  }
]